/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  FaucetTest,
  FaucetTestInterface,
} from "../../Faucet.t.sol/FaucetTest";

const _abi = [
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    constant: null,
    stateMutability: "view",
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    constant: null,
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setUp",
    inputs: [],
    outputs: [],
    constant: null,
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "test_claim_expiry",
    inputs: [],
    outputs: [],
    constant: null,
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "test_claim_halfway_mark",
    inputs: [],
    outputs: [],
    constant: null,
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "test_claim_past_expiry",
    inputs: [],
    outputs: [],
    constant: null,
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "test_claim_t0",
    inputs: [],
    outputs: [],
    constant: null,
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "test_mint",
    inputs: [],
    outputs: [],
    constant: null,
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "test_rescind_halfClaimed",
    inputs: [],
    outputs: [],
    constant: null,
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "test_rescind_t0",
    inputs: [],
    outputs: [],
    constant: null,
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "test_revertClaim_onlyOwner",
    inputs: [],
    outputs: [],
    constant: null,
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "test_revertMint_invalidFaucet",
    inputs: [],
    outputs: [],
    constant: null,
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "test_revertRescind_onlyRescindable",
    inputs: [],
    outputs: [],
    constant: null,
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "test_revertRescind_onlySupplier",
    inputs: [],
    outputs: [],
    constant: null,
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
      },
      {
        name: "val",
        type: "address",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
      },
      {
        name: "val",
        type: "string",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
      },
    ],
    anonymous: false,
  },
];

export class FaucetTest__factory {
  static readonly abi = _abi;
  static createInterface(): FaucetTestInterface {
    return new utils.Interface(_abi) as FaucetTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FaucetTest {
    return new Contract(address, _abi, signerOrProvider) as FaucetTest;
  }
}

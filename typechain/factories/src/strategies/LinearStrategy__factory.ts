/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LinearStrategy,
  LinearStrategyInterface,
} from "../../../src/strategies/LinearStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_totalAmt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_faucetStart",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_faucetExpiry",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "claimableAtTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102a9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b5780637aefca2414610074575b600080fd5b61005f6100493660046101c9565b6001600160e01b031916631ebbf28960e21b1490565b60405190151581526020015b60405180910390f35b6100876100823660046101fa565b610095565b60405190815260200161006b565b60008382116100a6575060006100d4565b8282106100b45750836100d4565b6100d16100c1858461022c565b866100cc878761022c565b6100dc565b90505b949350505050565b60008060006100eb8686610178565b9150915060006100fa85610197565b90506000610107866101b3565b90506000806000805b861561014e576101208787610178565b9094509250818401918210908301016101398786610178565b98810198818a10810198509094509250610110565b610167828261015d8d8c610251565b8201929183100190565b509c9b505050505050505050505050565b6000806000198385098385029250828110838203039150509250929050565b6000600182116101a657600080fd5b5060008190030460010190565b6000816101bf57600080fd5b5060008190030690565b6000602082840312156101db57600080fd5b81356001600160e01b0319811681146101f357600080fd5b9392505050565b6000806000806080858703121561021057600080fd5b5050823594602084013594506040840135936060013592509050565b60008282101561024c57634e487b7160e01b600052601160045260246000fd5b500390565b60008261026e57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212200885b13b4cc7f71c73be092021b48e0a831c4f252468d317b77ecffe00738e6564736f6c634300080c0033";

type LinearStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LinearStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LinearStrategy__factory extends ContractFactory {
  constructor(...args: LinearStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LinearStrategy> {
    return super.deploy(overrides || {}) as Promise<LinearStrategy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LinearStrategy {
    return super.attach(address) as LinearStrategy;
  }
  override connect(signer: Signer): LinearStrategy__factory {
    return super.connect(signer) as LinearStrategy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LinearStrategyInterface {
    return new utils.Interface(_abi) as LinearStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LinearStrategy {
    return new Contract(address, _abi, signerOrProvider) as LinearStrategy;
  }
}

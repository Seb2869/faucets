/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LinearStrategy,
  LinearStrategyInterface,
} from "../LinearStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_totalAmt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_faucetStart",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_faucetExpiry",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "claimableAtTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610342806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b5780637aefca24146100a5575b600080fd5b610090610049366004610218565b7fffffffff00000000000000000000000000000000000000000000000000000000167f7aefca24000000000000000000000000000000000000000000000000000000001490565b60405190151581526020015b60405180910390f35b6100b86100b3366004610261565b6100c6565b60405190815260200161009c565b60008382116100d757506000610105565b8282106100e5575083610105565b6101026100f28584610293565b866100fd8787610293565b61010d565b90505b949350505050565b600080600061011c86866101a9565b91509150600061012b856101e6565b9050600061013886610202565b90506000806000805b861561017f5761015187876101a9565b90945092508184019182109083010161016a87866101a9565b98810198818a10810198509094509250610141565b610198828261018e8d8c6102d1565b8201929183100190565b509c9b505050505050505050505050565b6000807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8385098385029250828110838203039150509250929050565b6000600182116101f557600080fd5b5060008190030460010190565b60008161020e57600080fd5b5060008190030690565b60006020828403121561022a57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461025a57600080fd5b9392505050565b6000806000806080858703121561027757600080fd5b5050823594602084013594506040840135936060013592509050565b6000828210156102cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b600082610307577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea264697066735822122032dc62af3ab80cb57adfbe3958ec30de67c72b619f98828a66a378045dfff2c664736f6c634300080c0033";

type LinearStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LinearStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LinearStrategy__factory extends ContractFactory {
  constructor(...args: LinearStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LinearStrategy> {
    return super.deploy(overrides || {}) as Promise<LinearStrategy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LinearStrategy {
    return super.attach(address) as LinearStrategy;
  }
  override connect(signer: Signer): LinearStrategy__factory {
    return super.connect(signer) as LinearStrategy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LinearStrategyInterface {
    return new utils.Interface(_abi) as LinearStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LinearStrategy {
    return new Contract(address, _abi, signerOrProvider) as LinearStrategy;
  }
}

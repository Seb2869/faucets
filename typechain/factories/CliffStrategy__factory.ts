/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CliffStrategy, CliffStrategyInterface } from "../CliffStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_totalAmt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_faucetStart",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_faucetExpiry",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "claimableAtTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610194806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b5780637aefca24146100a5575b600080fd5b6100906100493660046100e3565b7fffffffff00000000000000000000000000000000000000000000000000000000167f7aefca24000000000000000000000000000000000000000000000000000000001490565b60405190151581526020015b60405180910390f35b6100b86100b336600461012c565b6100c6565b60405190815260200161009c565b6000828210156100d8575060006100db565b50835b949350505050565b6000602082840312156100f557600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461012557600080fd5b9392505050565b6000806000806080858703121561014257600080fd5b505082359460208401359450604084013593606001359250905056fea264697066735822122082acdb31dd7b40168e30061f40bd5b1c9b9ee11432cb3bec62cb2c20d392bced64736f6c634300080c0033";

type CliffStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CliffStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CliffStrategy__factory extends ContractFactory {
  constructor(...args: CliffStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CliffStrategy> {
    return super.deploy(overrides || {}) as Promise<CliffStrategy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CliffStrategy {
    return super.attach(address) as CliffStrategy;
  }
  override connect(signer: Signer): CliffStrategy__factory {
    return super.connect(signer) as CliffStrategy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CliffStrategyInterface {
    return new utils.Interface(_abi) as CliffStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CliffStrategy {
    return new Contract(address, _abi, signerOrProvider) as CliffStrategy;
  }
}

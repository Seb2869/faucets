/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IFaucet {
  export type FaucetDetailsStruct = {
    totalAmount: BigNumberish;
    claimedAmount: BigNumberish;
    faucetStart: BigNumberish;
    faucetExpiry: BigNumberish;
    faucetStrategy: string;
    supplier: string;
    canBeRescinded: boolean;
  };

  export type FaucetDetailsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean
  ] & {
    totalAmount: BigNumber;
    claimedAmount: BigNumber;
    faucetStart: BigNumber;
    faucetExpiry: BigNumber;
    faucetStrategy: string;
    supplier: string;
    canBeRescinded: boolean;
  };
}

export interface IFaucetMetadataRendererInterface extends utils.Interface {
  functions: {
    "getTokenURIForFaucet(address,uint256,(uint256,uint256,uint256,uint256,address,address,bool))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "getTokenURIForFaucet"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTokenURIForFaucet",
    values: [string, BigNumberish, IFaucet.FaucetDetailsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTokenURIForFaucet",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFaucetMetadataRenderer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFaucetMetadataRendererInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTokenURIForFaucet(
      _faucetAddress: string,
      _tokenId: BigNumberish,
      _fd: IFaucet.FaucetDetailsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  getTokenURIForFaucet(
    _faucetAddress: string,
    _tokenId: BigNumberish,
    _fd: IFaucet.FaucetDetailsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getTokenURIForFaucet(
      _faucetAddress: string,
      _tokenId: BigNumberish,
      _fd: IFaucet.FaucetDetailsStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getTokenURIForFaucet(
      _faucetAddress: string,
      _tokenId: BigNumberish,
      _fd: IFaucet.FaucetDetailsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTokenURIForFaucet(
      _faucetAddress: string,
      _tokenId: BigNumberish,
      _fd: IFaucet.FaucetDetailsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

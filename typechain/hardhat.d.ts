/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Holder__factory>;
    getContractFactory(
      name: "ERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Holder__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IPublicSharedMetadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPublicSharedMetadata__factory>;
    getContractFactory(
      name: "SharedNFTLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SharedNFTLogic__factory>;
    getContractFactory(
      name: "DSTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSTest__factory>;
    getContractFactory(
      name: "Script",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Script__factory>;
    getContractFactory(
      name: "StdError",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StdError__factory>;
    getContractFactory(
      name: "StdStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StdStorage__factory>;
    getContractFactory(
      name: "Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Test__factory>;
    getContractFactory(
      name: "Vm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vm__factory>;
    getContractFactory(
      name: "ERC20Faucet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Faucet__factory>;
    getContractFactory(
      name: "ETHFaucet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ETHFaucet__factory>;
    getContractFactory(
      name: "FaucetFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FaucetFactory__factory>;
    getContractFactory(
      name: "IFaucet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFaucet__factory>;
    getContractFactory(
      name: "IFaucetFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFaucetFactory__factory>;
    getContractFactory(
      name: "PtMonoFont",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PtMonoFont__factory>;
    getContractFactory(
      name: "INFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFT__factory>;
    getContractFactory(
      name: "ZorbNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZorbNFT__factory>;
    getContractFactory(
      name: "FaucetMetadataRenderer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FaucetMetadataRenderer__factory>;
    getContractFactory(
      name: "IZorbRenderer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZorbRenderer__factory>;
    getContractFactory(
      name: "IFaucetMetadataRenderer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFaucetMetadataRenderer__factory>;
    getContractFactory(
      name: "Deploy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Deploy__factory>;
    getContractFactory(
      name: "DeployDeps",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeployDeps__factory>;
    getContractFactory(
      name: "DeployStrategies",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeployStrategies__factory>;
    getContractFactory(
      name: "CliffStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CliffStrategy__factory>;
    getContractFactory(
      name: "DailyStepStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DailyStepStrategy__factory>;
    getContractFactory(
      name: "IFaucetStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFaucetStrategy__factory>;
    getContractFactory(
      name: "LinearStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinearStrategy__factory>;
    getContractFactory(
      name: "ERC20FaucetTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20FaucetTest__factory>;
    getContractFactory(
      name: "ETHFaucetTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ETHFaucetTest__factory>;
    getContractFactory(
      name: "FaucetFactoryTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FaucetFactoryTest__factory>;
    getContractFactory(
      name: "CliffStrategyTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CliffStrategyTest__factory>;
    getContractFactory(
      name: "DailyStepStrategyTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DailyStepStrategyTest__factory>;
    getContractFactory(
      name: "LinearStrategyTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinearStrategyTest__factory>;
    getContractFactory(
      name: "BadERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BadERC20__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "User",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.User__factory>;
    getContractFactory(
      name: "VM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VM__factory>;

    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC1155Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Holder>;
    getContractAt(
      name: "ERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC721Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Holder>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IPublicSharedMetadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPublicSharedMetadata>;
    getContractAt(
      name: "SharedNFTLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SharedNFTLogic>;
    getContractAt(
      name: "DSTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSTest>;
    getContractAt(
      name: "Script",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Script>;
    getContractAt(
      name: "StdError",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StdError>;
    getContractAt(
      name: "StdStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StdStorage>;
    getContractAt(
      name: "Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Test>;
    getContractAt(
      name: "Vm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vm>;
    getContractAt(
      name: "ERC20Faucet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Faucet>;
    getContractAt(
      name: "ETHFaucet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ETHFaucet>;
    getContractAt(
      name: "FaucetFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FaucetFactory>;
    getContractAt(
      name: "IFaucet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFaucet>;
    getContractAt(
      name: "IFaucetFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFaucetFactory>;
    getContractAt(
      name: "PtMonoFont",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PtMonoFont>;
    getContractAt(
      name: "INFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFT>;
    getContractAt(
      name: "ZorbNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZorbNFT>;
    getContractAt(
      name: "FaucetMetadataRenderer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FaucetMetadataRenderer>;
    getContractAt(
      name: "IZorbRenderer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZorbRenderer>;
    getContractAt(
      name: "IFaucetMetadataRenderer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFaucetMetadataRenderer>;
    getContractAt(
      name: "Deploy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Deploy>;
    getContractAt(
      name: "DeployDeps",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeployDeps>;
    getContractAt(
      name: "DeployStrategies",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeployStrategies>;
    getContractAt(
      name: "CliffStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CliffStrategy>;
    getContractAt(
      name: "DailyStepStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DailyStepStrategy>;
    getContractAt(
      name: "IFaucetStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFaucetStrategy>;
    getContractAt(
      name: "LinearStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinearStrategy>;
    getContractAt(
      name: "ERC20FaucetTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20FaucetTest>;
    getContractAt(
      name: "ETHFaucetTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ETHFaucetTest>;
    getContractAt(
      name: "FaucetFactoryTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FaucetFactoryTest>;
    getContractAt(
      name: "CliffStrategyTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CliffStrategyTest>;
    getContractAt(
      name: "DailyStepStrategyTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DailyStepStrategyTest>;
    getContractAt(
      name: "LinearStrategyTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinearStrategyTest>;
    getContractAt(
      name: "BadERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BadERC20>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "User",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.User>;
    getContractAt(
      name: "VM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VM>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
